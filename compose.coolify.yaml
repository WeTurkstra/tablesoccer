---
# Coolify-optimized Docker Compose configuration
# Set environment variables in Coolify's UI (see .env.coolify.example)

services:
  php:
    build:
      context: .
      target: frankenphp_prod
    image: ${IMAGES_PREFIX}app-php
    restart: unless-stopped
    environment:
      # Server configuration
      SERVER_NAME: ${SERVER_NAME}, php:80
      APP_ENV: prod

      # Security secrets (REQUIRED - set in Coolify)
      APP_SECRET: ${APP_SECRET}

      # Database connection
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}?serverVersion=${POSTGRES_VERSION}&charset=utf8

      # Mercure configuration (REQUIRED - set in Coolify)
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET}

    volumes:
      - caddy_data:/data
      - caddy_config:/config
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT}
        protocol: udp
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:${POSTGRES_VERSION}-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw

volumes:
  caddy_data:
  caddy_config:
  database_data:
